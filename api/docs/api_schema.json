{
  "openapi": "3.0.1",
  "info": {
    "title": "SENG 499 API",
    "description": "This is SENG 499 Company 3 API",
    "contact": {
      "name": "Kjartan Einarsson",
      "url": "https://github.com/orgs/SENG-499-Company-3/projects/1/views/1",
      "email": "kjartanreinarsson@gmail.com"
    },
    "version": "1.0.2"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/seng_499_api/BackendApi/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    },
    {
      "url": "http://localhost:3001",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "admin",
      "description": "Secured Admin-only calls"
    },
    {
      "name": "frontend",
      "description": "Operations available to frontend"
    },
    {
      "name": "algorithm1",
      "description": "Operations available to algorithm1"
    },
    {
      "name": "algorithm2",
      "description": "Operations available to algorithm2"
    }
  ],
  "paths": {
    "/user/create": {
      "post": {
        "tags": ["admin"],
        "summary": "create endpoint for admin to create user",
        "description": "By passing in the appropriate user object, you can create new user\n",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "user create failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["frontend"],
        "summary": "login endpoint for user",
        "description": "By passing in the appropriate log creds, you can log into the application\n",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userlogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token for the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/jwt"
                }
              }
            }
          },
          "400": {
            "description": "user login failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/user/self": {
      "get": {
        "tags": ["frontend"],
        "summary": "self endpoint for user to re-auth",
        "description": "Self endpoint for Frontend to re-authenicate user\n",
        "operationId": "selfUser",
        "parameters": [
          {
            "name": "authorization",
            "in": "query",
            "description": "User JWT to re-authenicate",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/jwt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information and auth token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSelf"
                }
              }
            }
          },
          "400": {
            "description": "user jwt re-auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/user/list": {
      "get": {
        "tags": ["frontend"],
        "summary": "Get list of all users",
        "description": "Self endpoint for to get the list of all users",
        "operationId": "listUser",
        "responses": {
          "200": {
            "description": "List of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSelf"
                }
              }
            }
          },
          "401": {
            "description": "Need admin access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/create": {
      "post": {
        "tags": ["algorithm1"],
        "summary": "algorithm 1 endpoint to generate a schedule",
        "description": "Algorithm 1 endpoint to generate a schedule\n",
        "operationId": "createSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inputdata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "schedule generation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schedule"
                }
              }
            }
          },
          "400": {
            "description": "schedule generation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/validate": {
      "post": {
        "tags": ["algorithm1"],
        "summary": "algorithm 1 endpoint to validate an existing schedule",
        "description": "Algorithm 1 endpoint to validate a schedule\n",
        "operationId": "validateSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "schedule validation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/isvalidschedule"
                }
              }
            }
          },
          "400": {
            "description": "schedule validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/schedule/predict_class_sizes": {
      "post": {
        "tags": ["algorithm2"],
        "summary": "predict class Sizes",
        "description": "Endpoint exposed by algo2 for predicting class sizes\n",
        "operationId": "schedulePredictClassSize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/class_size_prediction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Class size is predicted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/predicted_class_size"
                }
              }
            }
          },
          "400": {
            "description": "unable to predict class size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/preferences/update": {
      "put": {
        "tags": ["frontend"],
        "summary": "Update or create a teacher preference",
        "description": "Used by frontend to share a update or create a teacher preference",
        "operationId": "updatePreference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/preference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "updated preference was successfully updated and the stored preference was this",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preference"
                }
              }
            }
          },
          "400": {
            "description": "updating/creating preferences failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/preferences/all": {
      "get": {
        "tags": ["frontend"],
        "summary": "Get all professors' preferences",
        "description": "Used by frontend to get the current professors preference",
        "operationId": "getPreferences",
        "responses": {
          "200": {
            "description": "Get this professors preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preference"
                }
              }
            }
          },
          "400": {
            "description": "User create failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/preferences/my": {
      "get": {
        "tags": ["frontend"],
        "summary": "Get the current professor's preferences",
        "description": "Used by frontend to get the preferences of the logged in professor",
        "operationId": "getMyPreferences",
        "responses": {
          "200": {
            "description": "Get this professors preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preference"
                }
              }
            }
          },
          "400": {
            "description": "Failed to get this user's preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/preferences/email:teacherEmail": {
      "get": {
        "tags": ["frontend"],
        "summary": "Get the preferences of the professor with the given email",
        "description": "Used by frontend to get the preferences of the professor with given email",
        "operationId": "getMyPreferences",
        "responses": {
          "200": {
            "description": "Professor's preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/preference"
                }
              }
            }
          },
          "400": {
            "description": "Failed to get given user's preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/courses/list": {
      "get": {
        "tags": ["frontend"],
        "summary": "Get list of courses",
        "description": "Used by frontend to the list of courses in the database.",
        "operationId": "listCourses",
        "responses": {
          "200": {
            "description": "List of course objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/course"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/courses/create": {
      "post": {
        "tags": ["frontend"],
        "summary": "Add a new course.",
        "description": "Used by frontend to add a new course.",
        "operationId": "createCourse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Course was created."
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/courses/remove": {
      "post": {
        "tags": ["frontend"],
        "summary": "Remove a course.",
        "description": "Used by frontend to remove a course.",
        "operationId": "removeCourse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/course"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Course was removed."
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/classroom/update": {
      "post": {
        "tags": ["frontend"],
        "summary": "Add/update a classroom.",
        "description": "Used by frontend to Add a classroom or if the classroom exists, it is updated instead.",
        "operationId": "updateClassroom",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/classroom"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated/created classroom."
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/classroom/list": {
      "post": {
        "tags": ["frontend"],
        "summary": "Get list of all classrooms.",
        "description": "Used by frontend to get a list of all classrooms.",
        "operationId": "updateClassroom",
        "responses": {
          "200": {
            "description": "List of classrooms.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/classroom"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }

  },
  "components": {
    "schemas": {
      "jwt": {
        "type": "object",
        "required": ["authorization"],
        "properties": {
          "authorization": {
            "type": "string",
            "description": "Json Web Token"
          }
        }
      },
      "userlogin": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "5e8b1b7b0b1f9a0017b5e3b1"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@email.com"
          },
          "password": {
            "type": "string",
            "description": "password hashed in db",
            "format": "password",
            "example": "password"
          }
        }
      },
      "term": {
        "required": ["termId", "year", "month"],
        "properties": {
          "termId": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "month": {
            "type": "number"
          }
        }
      },
      "preference": {
        "required": ["email", "coursePreferences", "additionalDetailes", "availability", "load"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": ""
          },
          "coursePreferences": {
            "type": "array",
            "items": {
              "required": ["courseId", "ability", "willingness"],
              "type": "object",
              "properties": {
                "courseId": {
                  "type": "number"
                },
                "ability": {
                  "type": "string",
                  "enum": ["ABLE", "WITH_DIFFICULTY"]
                },
                "willingness": {
                  "type": "string",
                  "enum": ["WILLING", "UNWILLING", "VERY_WILLING"]
                }
              }
            }
          },
          "additionalDetailes": {
            "type": "string"
          },
          "availability": {
            "type": "array",
            "items": {
              "required": ["term", "isAvailable"],
              "type": "object",
              "properties": {
                "term": {
                  "$ref": "#/components/schemas/term"
                },
                "isAvailable": {
                  "type": "boolean"
                }
              }
            }
          },
          "load": {
            "type": "integer"
          }
        }
      },
      "user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/userlogin"
          },
          {
            "required": ["name", "userrole"],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "User name"
              },
              "userrole": {
                "$ref": "#/components/schemas/userrole"
              }
            }
          }
        ]
      },
      "userSelf": {
        "required": ["_id", "email", "name", "userrole", "token"],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/days"
            }
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "example": "09:00"
          }
        }
      },
      "meetingtime": {
        "required": ["days", "endTime", "startTime"],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/days"
            }
          },
          "startTime": {
            "type": "string",
            "format": "time",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "format": "time",
            "example": "09:00"
          }
        }
      },
      "courseid": {
        "required": ["code", "subject", "term"],
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Course subject, e.g. SENG, CSC"
          },
          "code": {
            "type": "string",
            "description": "Course code, e.g. 499,310"
          },
          "term": {
            "$ref": "#/components/schemas/term"
          }
        }
      },
      "course": {
        "required": ["Subj", "Num", "Section", "Title", "SchedType", "Type"],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Course id"
          },
          "Subj": {
            "type": "string",
            "description": "Course subject, e.g. SENG, CSC"
          },
          "Num": {
            "type": "number",
            "description": "Course code, e.g. 499,310"
          },
          "Section": {
            "type": "string",
            "description": "Course section, e.g. A01"
          },
          "Title": {
            "type": "string",
            "description": "Course title, e.g. Data Structures and Algorithms 1"
          },
          "SchedType": {
            "type": "string",
            "description": "e.g. Lec or Lab"
          },
          "Type": {
            "type": "string",
            "description": "CORE or ELECTIVE"
          },
          "Cap": {
            "type": "number",
            "description": "Max number of students that can be in this course."
          }
        }
      },
      "classroom": {
        "required": ["location", "capacity", "equipment"],
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Classroom location, e.g. ECS 116."
          },
          "capacity": {
            "type": "number",
            "description": "Classroom capacity; max number of students that fit in it."
          },
          "equipment": {
            "type": "array",
            "description": "Array of strings of the equipment the class has, e.g. [projector]."
          }
        }
      },
      "teacherpreferenceform": {
        "required": ["courses", "peng", "userId"],
        "type": "object",
        "properties": {
          "peng": {
            "type": "boolean",
            "description": "Professional Engineer certified"
          },
          "userId": {
            "$ref": "#/components/schemas/user"
          },
          "courses": {
            "$ref": "#/components/schemas/courseid"
          }
        }
      },
      "isvalidschedule": {
        "required": ["valid"],
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          }
        }
      },
      "assignment": {
        "required": ["course", "prof", "timeslot", "room"],
        "type": "object",
        "properties": {
          "course": {
            "$ref": "#/components/schemas/inputdata_courses"
          },
          "prof": {
            "$ref": "#/components/schemas/inputdata_professors"
          },
          "timeslot": {
            "$ref": "#/components/schemas/inputdata_timeslots"
          },
          "room": {
            "$ref": "#/components/schemas/inputdata_rooms"
          }
        }
      },
      "schedule": {
        "required": ["assignments", "complete", "valid", "reward", "iterations", "c_hat", "quality"],
        "type": "object",
        "properties": {
          "iterations": {
            "type": "integer"
          },
          "quality": {
            "type": "number"
          },
          "valid": {
            "type": "boolean",
            "nullable": true
          },
          "complete": {
            "type": "boolean",
            "nullable": true
          },
          "reward": {
            "type": "number"
          },
          "c_hat": {
            "type": "number"
          },
          "assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assignment"
            }
          },
          "inputData": {
            "$ref": "#/components/schemas/inputdata"
          }
        }
      },
      "inputdata": {
        "type": "object",
        "properties": {
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inputdata_rooms"
            }
          },
          "timeslots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inputdata_timeslots"
            }
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inputdata_courses"
            }
          },
          "professors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inputdata_professors"
            }
          },
          "dimensions": {
            "$ref": "#/components/schemas/inputdata_dimensions"
          },
          "preferences": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "loads": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "required_courses": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "p_tgt": {
            "type": "integer"
          },
          "max_iter": {
            "type": "integer"
          }
        }
      },
      "class_size_prediction": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/class_size_prediction_inner"
        }
      },
      "predicted_class_size": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/predicted_class_size_inner"
        }
      },
      "userrole": {
        "type": "string",
        "description": "User roles",
        "enum": ["ADMIN", "TEACHER"]
      },
      "days": {
        "type": "string",
        "description": "Days course is offered on",
        "enum": ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"]
      },
      "error": {
        "required": ["errors", "message"],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "success": {
        "required": ["message", "success"],
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          }
        }
      },
      "inputdata_rooms": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "capacity": {
            "type": "integer"
          }
        }
      },
      "inputdata_timeslots": {
        "type": "object",
        "properties": {
          "day": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "length": {
            "type": "integer"
          },
          "startTime": {
            "type": "integer"
          },
          "index": {
            "type": "integer"
          }
        }
      },
      "inputdata_courses": {
        "type": "object",
        "properties": {
          "coursename": {
            "type": "string"
          },
          "courseYear": {
            "type": "integer"
          },
          "courseNumber": {
            "type": "integer"
          },
          "capacity": {
            "type": "integer"
          },
          "index": {
            "type": "integer"
          }
        }
      },
      "inputdata_professors": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "coursePreferences": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "load": {
            "type": "integer"
          },
          "index": {
            "type": "integer"
          }
        }
      },
      "inputdata_dimensions": {
        "type": "object",
        "properties": {
          "courses": {
            "type": "integer"
          },
          "times": {
            "type": "integer"
          },
          "teachers": {
            "type": "integer"
          },
          "rooms": {
            "type": "integer"
          }
        }
      },
      "class_size_prediction_inner": {
        "required": ["course", "Term", "Year", "pastEnrollment"],
        "type": "object",
        "properties": {
          "course": {
            "type": "string"
          },
          "Term": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "Year": {
            "type": "integer"
          },
          "pastEnrollment": {
            "type": "array",
            "items": {
              "required": ["size", "term", "year"],
              "type": "object",
              "properties": {
                "year": {
                  "type": "integer"
                },
                "term": {
                  "type": "integer"
                },
                "size": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "predicted_class_size_inner": {
        "type": "object",
        "properties": {
          "course": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "term": {
            "type": "integer"
          }
        }
      }
    }
  }
}
